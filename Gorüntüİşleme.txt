import cv2
import numpy as numpy
import numpy as np
from matplotlib import pyplot as plt

img = cv2.imread('268002.jpg',0)
cv2.imshow('resim',img)
cv2.waitKey(0)
cv2.destroyAllWindows()


"""""
img = cv2.medianBlur(img,5)
th2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\
            cv2.THRESH_BINARY,11,2)

plt.subplot(122),plt.imshow(th2),plt.title('MEDÝAN')
plt.xticks([]), plt.yticks([])
plt.show()

"""""
"""""
kernel = np.ones((3,3),np.uint8)
yayma = cv2.dilate(th2,kernel,iterations = 1)
cv2.imshow('yayma',yayma)
cv2.imwrite('yayma.png',yayma)
cv2.waitKey(0)
cv2.destroyAllWindows()
"""""
"""""
kernel = np.ones((3,3),np.uint8)
kapama = cv2.morphologyEx(th2,cv2.MORPH_CLOSE,kernel)
cv2.imshow('kapama',kapama)
cv2.imwrite('kapama.png',kapama)
cv2.waitKey(0)
cv2.destroyAllWindows()

kernel = np.ones((3,3),np.uint8)
yayma = cv2.dilate(kapama,kernel,iterations = 1)
cv2.imshow('yayma',yayma)
cv2.imwrite('yayma.png',yayma)
cv2.waitKey(0)
cv2.destroyAllWindows()
"""""


"""""

ret, thresh1 = cv2.threshold(dst, 120, 255, cv2.THRESH_BINARY +
                             cv2.THRESH_OTSU)
plt.subplot(122),plt.imshow( thresh1),plt.title('MEDÝAN')
plt.xticks([]), plt.yticks([])
plt.show()
"""""

#merve
"""""
Z = img.reshape((-1,3))

# convert to np.float32
Z = np.float32(Z)

# define criteria, number of clusters(K) and apply kmeans()
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
K = 15
ret,label,center=cv2.kmeans(Z,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)

# Now convert back into uint8, and make original image
center = np.uint8(center)
res = center[label.flatten()]
res2 = res.reshape((img.shape))

cv2.imshow('res2',res2)
cv2.waitKey(0)
cv2.destroyAllWindows()


canny = cv2.Canny(res2,100,200)
cv2.imshow("Canny Kenar Bulma",canny)
cv2.waitKey(0)

kernel = np.ones((3,3),np.uint8)
yayma = cv2.dilate(canny,kernel,iterations = 1)
cv2.imshow('yayma',yayma)
cv2.imwrite('yayma.png',yayma)
cv2.waitKey(0)
cv2.destroyAllWindows()

kernel = np.ones((3,3),np.uint8)
erozyon = cv2.erode(yayma,kernel,iterations = 1)
cv2.imshow('erezyon',erozyon)
cv2.waitKey(0)
cv2.destroyAllWindows()

ret, thresh1 = cv2.threshold(erozyon, 120, 255, cv2.THRESH_BINARY +
                             cv2.THRESH_OTSU)
plt.subplot(122),plt.imshow( thresh1),plt.title('MEDÝAN')
plt.xticks([]), plt.yticks([])
plt.show()
"""""

#esra


kernel_sharpen_1 = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
output_2 = cv2.filter2D(img, -1, kernel_sharpen_1)
ret, thresh1 = cv2.threshold(output_2, 120, 255, cv2.THRESH_BINARY +
                             cv2.THRESH_OTSU)
plt.subplot(122),plt.imshow( thresh1),plt.title('MEDÝAN')
plt.xticks([]), plt.yticks([])
plt.show()

kernel = np.ones((5,5),np.float32)/25
dst = cv2.filter2D(thresh1,-1,kernel)

plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(dst),plt.title('Averaging')
plt.xticks([]), plt.yticks([])
plt.show()



































